{"ast":null,"code":"import _defineProperty from \"/home/jesus_rubio/github/nextpage/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _classCallCheck from \"/home/jesus_rubio/github/nextpage/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jesus_rubio/github/nextpage/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/jesus_rubio/github/nextpage/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/home/jesus_rubio/github/nextpage/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jesus_rubio/github/nextpage/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nvar _jsxFileName = \"/home/jesus_rubio/github/nextpage/src/components/SectionForm.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport _ from 'lodash';\nimport { markdownify } from '../utils';\nimport FormField from './FormField';\n\nvar SectionForm = /*#__PURE__*/function (_React$Component) {\n  _inherits(SectionForm, _React$Component);\n\n  var _super = _createSuper(SectionForm);\n\n  function SectionForm() {\n    _classCallCheck(this, SectionForm);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(SectionForm, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      var section = _.get(this.props, 'section');\n\n      var sectionId = _.get(section, 'section_id');\n\n      var title = _.get(section, 'title');\n\n      var content = _.get(section, 'content');\n\n      var formId = _.get(section, 'form_id');\n\n      var formAction = _.get(section, 'form_action');\n\n      var formFields = _.get(section, 'form_fields');\n\n      var submitLabel = _.get(section, 'submit_label');\n\n      var formHoneypotInputId = formId + '-honeypot';\n      var formHoneypotLabelId = formId + '-honeypot-label';\n      var formHoneypotName = formId + '-bot-field';\n      return /*#__PURE__*/_jsxDEV(\"section\", {\n        id: sectionId,\n        className: \"block block-form\",\n        children: [title && /*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"block-title underline inner-sm\",\n          children: title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"block-content inner-sm\",\n          children: [content && markdownify(content), /*#__PURE__*/_jsxDEV(\"form\", _objectSpread(_objectSpread({\n            name: formId,\n            id: formId\n          }, formAction ? {\n            action: formAction\n          } : null), {}, {\n            method: \"POST\",\n            \"data-netlify\": \"true\",\n            \"data-netlify-honeypot\": formHoneypotName,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"screen-reader-text\",\n              children: /*#__PURE__*/_jsxDEV(\"label\", {\n                id: formHoneypotLabelId,\n                htmlFor: formHoneypotInputId,\n                children: [\"Don't fill this out if you're human:\", /*#__PURE__*/_jsxDEV(\"input\", {\n                  \"aria-labelledby\": formHoneypotLabelId,\n                  id: formHoneypotInputId,\n                  name: formHoneypotName\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 37,\n                  columnNumber: 33\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"hidden\",\n              name: \"form-name\",\n              value: formId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 40,\n              columnNumber: 25\n            }, this), _.map(formFields, function (field, index) {\n              return /*#__PURE__*/_jsxDEV(FormField, {\n                field: field\n              }, index, false, {\n                fileName: _jsxFileName,\n                lineNumber: 42,\n                columnNumber: 29\n              }, _this);\n            }), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-submit\",\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                type: \"submit\",\n                className: \"button\",\n                children: submitLabel\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 45,\n                columnNumber: 29\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 44,\n              columnNumber: 25\n            }, this)]\n          }), void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 13\n      }, this);\n    }\n  }]);\n\n  return SectionForm;\n}(React.Component);\n\nexport { SectionForm as default };","map":{"version":3,"sources":["/home/jesus_rubio/github/nextpage/src/components/SectionForm.js"],"names":["React","_","markdownify","FormField","SectionForm","section","get","props","sectionId","title","content","formId","formAction","formFields","submitLabel","formHoneypotInputId","formHoneypotLabelId","formHoneypotName","action","map","field","index","Component"],"mappings":"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","sourcesContent":["import React from 'react';\nimport _ from 'lodash';\n\nimport { markdownify } from '../utils';\nimport FormField from './FormField';\n\nexport default class SectionForm extends React.Component {\n    render() {\n        const section = _.get(this.props, 'section');\n        const sectionId = _.get(section, 'section_id');\n        const title = _.get(section, 'title');\n        const content = _.get(section, 'content');\n        const formId = _.get(section, 'form_id');\n        const formAction = _.get(section, 'form_action');\n        const formFields = _.get(section, 'form_fields');\n        const submitLabel = _.get(section, 'submit_label');\n        const formHoneypotInputId = formId + '-honeypot';\n        const formHoneypotLabelId = formId + '-honeypot-label';\n        const formHoneypotName = formId + '-bot-field';\n\n        return (\n            <section id={sectionId} className=\"block block-form\">\n                {title && <h2 className=\"block-title underline inner-sm\">{title}</h2>}\n                <div className=\"block-content inner-sm\">\n                    {content && markdownify(content)}\n                    <form\n                        name={formId}\n                        id={formId}\n                        {...(formAction ? ({ action: formAction }) : null)}\n                        method=\"POST\"\n                        data-netlify=\"true\"\n                        data-netlify-honeypot={formHoneypotName}\n                    >\n                        <div className=\"screen-reader-text\">\n                            <label id={formHoneypotLabelId} htmlFor={formHoneypotInputId}>\n                                Don't fill this out if you're human: \n                                <input aria-labelledby={formHoneypotLabelId} id={formHoneypotInputId} name={formHoneypotName} />\n                            </label>\n                        </div>\n                        <input type=\"hidden\" name=\"form-name\" value={formId} />\n                        {_.map(formFields, (field, index) => (\n                            <FormField key={index} field={field} />\n                        ))}\n                        <div className=\"form-submit\">\n                            <button type=\"submit\" className=\"button\">{submitLabel}</button>\n                        </div>\n                    </form>\n                </div>\n            </section>\n        );\n    }\n}\n"]},"metadata":{},"sourceType":"module"}